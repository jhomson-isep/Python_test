<odoo>
     <data noupdate="1">
         <record id="base_action_rule_tickets_past_deadline" model="base.automation">
             <field name="active" eval="True"/>
             <field name="trg_date_range" eval="1"/>
             <field name="trg_date_range_type" eval="'day'"/>
             <field name="filter_domain">[('sla_active', '=', True), ('sla_fail', '=', False), ('deadline', '!=', False)]</field>
             <field name="model" eval="'helpdesk.ticket'"/>
             <field name="model_id" ref="helpdesk.model_helpdesk_ticket"/>
             <field name="name" eval="'Ticket Escalation Emails - 1 Day Past Deadline'"/>
             <field name="sequence" eval="0"/>
             <field name="trg_date_id" ref="helpdesk.field_helpdesk_ticket__deadline"/>
             <field name="trigger" eval="'on_time'"/>
             <field name="state" eval="'code'"/>
            <field name="code"><![CDATA[
# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}
templ = env.ref('helpdesk_enforce_sla.heldesk_ticket_sla_escalation_email')
if templ:
    templ.send_mail(record.id, force_send=True, raise_exception=True)
            ]]></field>
         </record>

         <record id="base_action_rule_tickets_1" model="base.automation">
             <field name="active" eval="True"/>
             <field name="trg_date_range" eval="-1"/>
             <field name="trg_date_range_type" eval="'day'"/>
             <field name="filter_domain">[('sla_active', '=', True), ('sla_fail', '=', False), ('deadline', '!=', False) ]</field>
             <field name="model" eval="'helpdesk.ticket'"/>
             <field name="model_id" ref="helpdesk.model_helpdesk_ticket"/>
             <field name="name" eval="'Email Reminders For Tickets - 1 Day Before Deadline'"/>
             <field name="sequence" eval="0"/>
             <field name="trg_date_id" ref="helpdesk.field_helpdesk_ticket__deadline"/>
             <field name="trigger" eval="'on_time'"/>
             <field name="state" eval="'code'"/>
            <field name="code"><![CDATA[
# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}
templ = env.ref('helpdesk_enforce_sla.heldesk_ticket_sla_reminder_email')
if templ:
    templ.send_mail(record.id, force_send=True, raise_exception=True)
            ]]></field>
         </record>

         <record id="base_action_rule_tickets_2" model="base.automation">
             <field name="active" eval="True"/>
             <field name="trg_date_range" eval="-12"/>
             <field name="trg_date_range_type" eval="'hour'"/>
             <field name="filter_domain">[('sla_active', '=', True), ('sla_fail', '=', False), ('deadline', '!=', False) ]</field>
             <field name="model" eval="'helpdesk.ticket'"/>
             <field name="model_id" ref="helpdesk.model_helpdesk_ticket"/>
             <field name="name" eval="'Email Reminders For Tickets - 12 Hours Before Deadline'"/>
             <field name="sequence" eval="0"/>
             <field name="trg_date_id" ref="helpdesk.field_helpdesk_ticket__deadline"/>
             <field name="trigger" eval="'on_time'"/>
             <field name="state" eval="'code'"/>
            <field name="code"><![CDATA[
# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}
templ = env.ref('helpdesk_enforce_sla.heldesk_ticket_sla_reminder_email')
if templ:
    templ.send_mail(record.id, force_send=True, raise_exception=True)
            ]]></field>
         </record>

         <record id="base_action_rule_tickets_3" model="base.automation">
             <field name="active" eval="True"/>
             <field name="trg_date_range" eval="-6"/>
             <field name="trg_date_range_type" eval="'hour'"/>
             <field name="filter_domain">[('sla_active', '=', True), ('sla_fail', '=', False), ('deadline', '!=', False) ]</field>
             <field name="model" eval="'helpdesk.ticket'"/>
             <field name="model_id" ref="helpdesk.model_helpdesk_ticket"/>
             <field name="name" eval="'Email Reminders For Tickets - 6 Hours Before Deadline'"/>
             <field name="sequence" eval="0"/>
             <field name="trg_date_id" ref="helpdesk.field_helpdesk_ticket__deadline"/>
             <field name="trigger" eval="'on_time'"/>
             <field name="state" eval="'code'"/>
            <field name="code"><![CDATA[
# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}
templ = env.ref('helpdesk_enforce_sla.heldesk_ticket_sla_reminder_email')
if templ:
    templ.send_mail(record.id, force_send=True, raise_exception=True)
            ]]></field>
         </record>

         <record id="base_action_rule_tickets_4" model="base.automation">
             <field name="active" eval="True"/>
             <field name="trg_date_range" eval="-3"/>
             <field name="trg_date_range_type" eval="'hour'"/>
             <field name="filter_domain">[('sla_active', '=', True), ('sla_fail', '=', False), ('deadline', '!=', False) ]</field>
             <field name="model" eval="'helpdesk.ticket'"/>
             <field name="model_id" ref="helpdesk.model_helpdesk_ticket"/>
             <field name="name" eval="'Email Reminders For Tickets - 3 Hours Before Deadline'"/>
             <field name="sequence" eval="0"/>
             <field name="trg_date_id" ref="helpdesk.field_helpdesk_ticket__deadline"/>
             <field name="trigger" eval="'on_time'"/>
             <field name="state" eval="'code'"/>
            <field name="code"><![CDATA[
# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}
templ = env.ref('helpdesk_enforce_sla.heldesk_ticket_sla_reminder_email')
if templ:
    templ.send_mail(record.id, force_send=True, raise_exception=True)
            ]]></field>
         </record>
     </data>
</odoo>
